General notes
=============

The protocol is based on the WebSocket protocol. Once a WebSocket
connection is established, each end sends messages that correspond to
WebSocket messages. Each message begins with a single byte
containining the message ID. After that is the payload. The contents
of the payload depends on the message type, as described below. Each
message must be exactly sized to contain the message ID + the payload,
ie, there can be no extra data at the end of the message.

All numbers are in little-endian.

A player in the game is distinct from the network connection. The
intention is that if the connection is dropped then the client can
reconnect and recover without creating a new player. Instead a player
is identified by a 64-bit ID which is randomly generated by the
server. When connecting the client can either request a new player or
it can send this ID in order to continue with a previous player.

When a position is described by either the server or the client it is
given as a uint32_t where 0 represents the bottom-leftmost position
and UINT32_MAX+1 represents the top-rightmost position. The players
also have a direction which is represented as a uint16_t where 0 is
directly east and increasing numbers turn counter-clockwise up to
UINT16_MAX+1 which represents a full turn.

The client completely controls its own position and direction and only
informs the server of changes. The server doesn't do any checks
against cheating such as walking through walls. The server only
reports information about the other players.

Messages to the server
======================

The client initiates the communication by sending one of the following
messages:

NEW_PLAYER (0x80)
-----------------

• Empty payload

This should be sent when the client first starts and hasn't tried
connecting before. The server will create a player ID and send it in a
PLAYER_ID message.

RECONNECT (0x81)
----------------

• uint64_t player_id

This should be sent if the connection is dropped in order to resume.
The player_id must be a valid ID given from a previous PLAYER_ID
message from the server. If the server hasn't heard of this ID or the
player has been lost then it will generate a new ID instead as if
NEW_PLAYER was sent.

UPDATE_POSITION (0x82)
----------------------

• uint32_t x_position
• uint32_t y_position
• uint16_t direction

Sent by the client whenever the player has moved.

KEEP_ALIVE (0x83)
-----------------

• No payload

Some data must be sent by the client at least every minute or the
server will close the connection. If nothing else needs to be sent the
client can send this empty message. No response is sent.

SPEECH (0x84)
-------------

• A packet in the Opus audio codec. The packet must not be larger than
  128 bytes and must contain exactly 10ms of data with a single
  channel.

UPDATE_APPEARANCE (0x85)
------------------------

• uint8_t image

Sent when the player first connects or whenever their appearance
changes. The image field specifies which image to display for this
player. The actual images used are up to the client, the server just
passes the number across.

UPDATE_FLAGS (0x86)
-----------------------
• The payload is a list of uint32_ts each one representing a flag.
  For the list of flags see common/fv-flag.h

Sent when the player first connects or whenever their list of
flags changes. It is invalid to send more than 16 flags.

Messages to the client
======================

PLAYER_ID (0x00)
----------------

• uint64_t player_id

This is sent as the first message in response to a NEW_PLAYER command
in order to report the player's ID. If the player instead sends a
RECONNECT message this won't be sent unless the player was lost in
which case a new player ID will be generated. Therefore the client
should be prepared to update its player ID whenever this message is
received.

CONSISTENT (0x01)
-----------------

• No payload

This is sent once the server has sent enough update messages that the
client has a consistent state that can be drawn. This is used to avoid
the client painting with a partially updated state for example if a
player's appearance depends on multiple messages.

N_PLAYERS (0x02)
----------------

• uint16_t n_players

Sent by the server to update the number of players that are currently
connected. This won't include the player of this client.

PLAYER_POSITION (0x03)
----------------------

• uint16_t player_num
• uint32_t x_position
• uint32_t y_position
• uint16_t direction

Sent by the server whenever another player has moved. This is not sent
when the client's own player moves.

PLAYER_SPEECH (0x04)
--------------------

• uint16_t player_num
• The remainder of the payload is a packet in the Opus audio codec.
  The packet must not be larger than 128 bytes and must contain
  exactly 10ms of data with a single channel.

PLAYER_APPEARANCE (0x05)
------------------------

• uint16_t player_num
• uint8_t image

Sent whenever a player's appearance changes.

PLAYER_FLAGS (0x06)
-----------------------

• uint16_t player_num
• The remainder of the payload is a list of uint32_ts each one
  representing a flag. For the list of flags see
  common/fv-flag.h

Sent whenever a player's list of flags changes.
